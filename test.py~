import streamlit as st
from streamlit_option_menu import option_menu
import plotly.express as px
import pandas as pd

# Initialize session state
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False

# Sidebar menu
with st.sidebar:
    selected = option_menu(
        menu_title="Services",
        options=["Home", "Admin", "AI-Chatbot", "View Attendance", "Contact Us"],
        icons=["house", "asterisk", "robot", "book", "envelope"],
        menu_icon="cast",
    )

# Admin authentication and functionality
if selected == "Admin":
    if not st.session_state.authenticated:
        st.title("Admin Login")
        # Admin authentication
        username = st.text_input("Username").lower()
        password = st.text_input("Password", type="password")
        login_button = st.button("Login")

        if login_button:
            if username == "admin" and password == "1234":
                st.success("Login successful! Welcome, Admin!")
                st.session_state.authenticated = True  # Set authenticated state
                st.experimental_rerun()
            else:
                st.error("Invalid username or password. Please try again.")

    elif st.session_state.authenticated:
        st.title("Admin Dashboard")
        st.header("Choose an action:")
        # Admin functionalities
        admin_action = st.selectbox(
            "Admin Actions", ["Insert Data", "Update Data", "Delete Data", "View All Records"]
        )

        if admin_action == "Insert Data":
            st.subheader("Insert Data")
            with st.form("insert_form"):
                id = st.text_input("ID")
                name = st.text_input("Name")
                email = st.text_input("Email")
                submit_button = st.form_submit_button("Submit")

            if submit_button:
                if id and name and email:  # Simple validation
                    st.success(f"Data inserted successfully!\nID: {id}\nName: {name}\nEmail: {email}")
                else:
                    st.error("All fields are required. Please fill them out.")

        elif admin_action == "Update Data":
            st.subheader("Update Data")
            st.write("Update functionality coming soon...")

        elif admin_action == "Delete Data":
            st.subheader("Delete Data")
            st.write("Delete functionality coming soon...")

        elif admin_action == "View All Records":
            st.subheader("View All Records")
            st.write("View all records functionality coming soon...")

        # Logout button
        logout_button = st.button("Logout")
        if logout_button:
            st.success("Logged out successfully!")
            st.session_state.authenticated = False
            st.experimental_rerun()

elif selected == "View Attendance":
    st.title("View Attendance")
    # Sample data for attendance
    attendance_data = {
        "Month": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October"],
        "Days Present": [20, 18, 22, 24, 20, 19, 21, 23, 22, 20],
    }
    df = pd.DataFrame(attendance_data)

    # Plot attendance graph
    st.subheader("Attendance Chart")
    fig = px.bar(
        df,
        x="Month",
        y="Days Present",
        title="Monthly Attendance",
        labels={"Month": "Month", "Days Present": "Days Present"},
        width=800,
        height=400,
    )
    fig.update_layout(xaxis_title="Month", yaxis_title="Days Present", title_x=0.5)
    st.plotly_chart(fig)
